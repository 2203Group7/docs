openapi: 3.0.3
info:
  title: TOHEAR API
  description: A complete API for managing podcast-related operations, including episodes, categories, tags, and user data.
  version: 1.0.0
servers:
  - url: https://api.tohear.com/v1
    description: Production server

components:
  schemas:
    # 通用错误响应模型
    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              example: NOT_FOUND
            message:
              type: string
              example: Resource not found
            details:
              type: object

    # 核心模型定义
    Podcast:
      type: object
      required:
        - title
        - description
        - categoryId
        - userId
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        title:
          type: string
          example: "Tech Talks"
        description:
          type: string
          example: "Podcast on the latest technology trends"
        categoryId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        tags:
          type: array
          items:
            type: string
            format: uuid
        publishedAt:
          type: string
          format: date-time
          example: "2024-03-01T15:00:00Z"
        duration:
          type: integer
          example: 120

    Category:
      type: object
      required:
        - name
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: "Technology"
        color:
          type: string
          example: "#FF5733"

    Tag:
      type: object
      required:
        - name
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: "Tech"

    User:
      type: object
      required:
        - name
        - email
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          example: "john.doe@example.com"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  # ==================== Podcasts ====================
  /podcasts:
    get:
      summary: List all podcasts
      parameters:
        - name: categoryId
          in: query
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        200:
          description: A paginated list of podcasts
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Podcast"
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      page:
                        type: integer
                      limit:
                        type: integer
    post:
      summary: Create a new podcast
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Podcast"
      responses:
        201:
          description: Podcast created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Podcast"

  /podcasts/{podcastId}:
    parameters:
      - name: podcastId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get a podcast by ID
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Podcast"
        404:
          $ref: "#/components/responses/NotFound"

    put:
      summary: Update a podcast
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Podcast"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Podcast"

    delete:
      summary: Delete a podcast
      responses:
        204:
          description: Successfully deleted
        404:
          $ref: "#/components/responses/NotFound"

  # ==================== Categories ====================
  /categories:
    get:
      summary: List all categories
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"

    post:
      summary: Create a new category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"

  # ==================== Tags ====================
  /tags:
    get:
      summary: List all tags
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tag"

    post:
      summary: Create a new tag
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tag"
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"

  # ==================== Users ====================
  /users:
    get:
      summary: List all users
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"

    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

responses:
  NotFound:
    description: The specified resource was not found
    content:
      application/json:
        schema:
          $ref: "#/components/schemas/Error"

security:
  - BearerAuth: []
